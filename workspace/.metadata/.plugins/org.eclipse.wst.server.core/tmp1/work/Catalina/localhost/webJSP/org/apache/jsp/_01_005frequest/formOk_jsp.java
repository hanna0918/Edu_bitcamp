/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2021-09-01 02:05:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._01_005frequest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import java.util.Arrays;
import java.util.Calendar;

public final class formOk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Enumeration");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
	// post방식의 전송시 한글인코딩 설정한다.
	request.setCharacterEncoding("UTF-8");

	String userid = request.getParameter("userid");
	String username = request.getParameter("username");	
	String gender = request.getParameter("gender");
	
	
	//관심분야
	String[] inter = request.getParameterValues("inter");
	String[] local = request.getParameterValues("local");
	
	String content = request.getParameter("content");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	아이디 : ");
      out.print( userid );
      out.write("<br/>\r\n");
      out.write("	이름 : ");
      out.print( username );
      out.write("<br/>\r\n");
      out.write("	성별 : ");
      out.print( gender );
      out.write("<br/>\r\n");
      out.write("	관심분야 : ");
      out.print( Arrays.toString(inter) );
      out.write("<br/>\r\n");
      out.write("	지역 : ");
      out.print( Arrays.toString(local) );
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print( content);
      out.write("\r\n");
      out.write("	<hr/>\r\n");
      out.write("	<h1>request객체의 메소드</h1>\r\n");
      out.write("	<ol>\r\n");
      out.write("		<li>\r\n");
      out.write("		");

			//폼의 변수 목록을 얻어오기
			Enumeration<String> names = request.getParameterNames();
			while(names.hasMoreElements()){
				//out.println(names.nextElement()+"<br/>");
				
      out.write("\r\n");
      out.write("					");
      out.print(names.nextElement()+", " );
      out.write("\r\n");
      out.write("				");

			}
		
      out.write("\r\n");
      out.write("		</li>\r\n");
      out.write("		<li>접속자의 ip정보 : ");
      out.print(request.getRemoteAddr() );
      out.write("</li><!-- localhost -> ip -->\r\n");
      out.write("		<li>인코딩 코드값 : ");
      out.print(request.getCharacterEncoding() );
      out.write("</li>\r\n");
      out.write("		<li>contentType : ");
      out.print(request.getContentType() );
      out.write("</li>\r\n");
      out.write("		<li>전송방식 : ");
      out.print(request.getMethod() );
      out.write("</li>\r\n");
      out.write("		<li>프로토콜 : ");
      out.print(request.getProtocol() );
      out.write("</li>\r\n");
      out.write("		<li>URI : ");
      out.print( request.getRequestURI() );
      out.write("</li>\r\n");
      out.write("		<li>contextPath : ");
      out.print(request.getContextPath() );
      out.write("</li><!-- /webJSP -->\r\n");
      out.write("		<li>서버이름 : ");
      out.print(request.getServerName() );
      out.write("</li>\r\n");
      out.write("		<li>포트번호 : ");
      out.print(request.getServerPort() );
      out.write("</li>\r\n");
      out.write("		<li>절대주소 : ");
      out.print(request.getServletContext().getRealPath("/") );
      out.write("</li>\r\n");
      out.write("	</ol>\r\n");
      out.write("	<img src='");
      out.print(request.getContextPath() );
      out.write("/img/hongkong.jfif'/>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
